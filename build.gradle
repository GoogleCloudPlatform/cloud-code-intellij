
plugins {
    id 'net.researchgate.release' version '2.3.4'
}

apply plugin: 'base'

task loadIdea(type:Exec) {
    commandLine './fetchIdea.sh'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'findbugs'
    apply plugin: 'pmd'
    apply plugin: 'jdepend'
    group = 'com.google.gct'
    version = '0.9-alpha.1-SNAPSHOT'

    repositories {
        mavenCentral()
    }

    dependencies {
        compile group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.4.+'
        compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5'
        testCompile group: 'junit', name: 'junit', version: '4.+'
        testCompile group: 'org.mockito', name: 'mockito-all', version: '1.9.5'
    }

    compileJava.dependsOn ':loadIdea'
    sourceCompatibility = 1.6
    targetCompatibility = 1.6

    processResources {
        filesMatching("**/plugin.xml") {
            expand "pluginVersionPlaceholder": version
        }
    }

}


// Configuration to package IDEA with our plugins pre-installed in 
// the root project build directory

ext.devBuildDir = "${buildDir}/idea-IC-gcloud"
ext.devConfigDir = "${buildDir}/idea-IC-gcloud-config"

task devBuild(type:Copy) {
    dependsOn cleanDevBuild
    from ('idea-IC') 
    into project.devBuildDir
    doLast {
        def ideaConfigFile = new File(devBuildDir, 'bin/idea.properties')
        assert ideaConfigFile.exists()
        ideaConfigFile.withWriterAppend('UTF-8') { writer ->
            writer.writeLine('\n# CHANGES FOR TEST BUILDS OF PLUGIN');
            writer.writeLine("idea.config.path=${devConfigDir}/config");
            writer.writeLine("idea.system.path=${devConfigDir}/system");
            writer.writeLine('idea.plugins.path=${idea.config.path}/plugins');
            writer.writeLine('idea.log.path=${idea.system.path}/log');
        }
        def jvmConfigFile = new File(devBuildDir, 'bin/idea64.vmoptions')
        assert jvmConfigFile.exists()
        jvmConfigFile.withWriterAppend('UTF-8') { writer ->
          writer.writeLine('-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005');
        }
    }
}

subprojects {
    afterEvaluate { project ->
        if (project.hasProperty("plugin") && (project.plugin instanceof Zip)) {
            rootProject.devBuild {
                dependsOn project.plugin
                from (zipTree(project.plugin.archivePath)) {
                    into 'plugins'
                }
            }
        }
    }
}
