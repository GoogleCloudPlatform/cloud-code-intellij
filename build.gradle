buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'gradle.plugin.org.jetbrains:gradle-intellij-plugin:0.0.35'
    }
}

plugins {
    id 'net.researchgate.release' version '2.3.4'
}

subprojects {
    repositories {
        mavenCentral()
    }

    apply plugin: 'java'
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }
    group = 'com.google.gct'

    task jarSources(type:Jar) {
      from sourceSets.main.allSource
      classifier = 'sources'
    }
    assemble.dependsOn jarSources

    apply plugin: 'org.jetbrains.intellij'
    intellij {
        version = ideaVersion
        downloadSources = true
        sandboxDirectory = "${rootProject.buildDir}/idea-sandbox"

        publish {
            username System.getenv('IJ_REPO_USERNAME')
            password System.getenv('IJ_REPO_PASSWORD')
            channel ijPluginRepoChannel
        }
    }

    configurations.all {
        resolutionStrategy {
            failOnVersionConflict()

            def provided = [["org.apache.httpcomponents", "httpclient"],
                            ["com.google.guava", "guava"]]
            eachDependency { DependencyResolveDetails dependency ->
                if (provided.contains([dependency.requested.group, dependency.requested.name])) {
                    throw new GradleException('Dependency "' + dependency.requested.name +
                            '" should not be included in your build')
                }
            }
        }
    }

    dependencies {
        testCompile 'junit:junit:4.+'
        testCompile ('org.mockito:mockito-core:1.9.5') {
            exclude group: 'org.hamcrest', module: 'hamcrest-core'
        }
        testCompile 'org.hamcrest:hamcrest-all:1.3'
    }

    apply plugin: 'findbugs'
    findbugs {
        ignoreFailures = true
        sourceSets = [sourceSets.main]
        effort = "max"
        toolVersion = '2.0.3'
    }

    tasks.withType(FindBugs) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    apply plugin: 'pmd'
    pmd {
        ignoreFailures = true
        sourceSets = [sourceSets.main]
    }

    apply plugin: 'jdepend'
    configurations.all {
        resolutionStrategy {
            // JDepend manages to include a different version of itself in its own transitive closure.
            force "jdepend:jdepend:${project.jdepend.toolVersion}"
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

release {
    buildTasks = ['doRelease']
    // Do not change the tagTemplate value to double quotes or the version will be evaluated before
    // the SNAPSHOT version is updated to the release version.
    tagTemplate = 'v$version'
    git {
        requireBranch = /^release_v\d+.*$/
    }
}

// We aren't building or doing anything interesting for release.
// We just update the version and generate the tag as CI will handle deployment.
task doRelease {
    doLast {
        println '===============================!!PLEASE READ!!=================================\n\n' +
                'IMPORTANT:  The release command will trigger the creation of a new release ' +
                'in Github, the uploading of binaries to github, and the publishing of our plugin' +
                'to the IntelliJ plugin repository.\n' +
                'Hit CTRL+C to cancel.\n'
    }
}

apply from: "scripts/android-studio-build.gradle"
