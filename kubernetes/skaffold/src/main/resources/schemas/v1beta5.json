{
  "type": "object",
  "anyOf": [
    {
      "$ref": "#/definitions/SkaffoldPipeline"
    }
  ],
  "$schema": "http://json-schema-org/draft-07/schema#",
  "definitions": {
    "Activation": {
      "properties": {
        "command": {
          "type": "string",
          "description": "a Skaffold command for which the profile is auto-activated.",
          "x-intellij-html-description": "a Skaffold command for which the profile is auto-activated.\n",
          "examples": [
            "dev"
          ]
        },
        "env": {
          "type": "string",
          "description": "a key=value pair. The profile is auto-activated if an Environment Variable `key` has value `value`.",
          "x-intellij-html-description": "a key=value pair. The profile is auto-activated if an Environment Variable <code>key</code> has value <code>value</code>.\n",
          "examples": [
            "ENV=production"
          ]
        },
        "kubeContext": {
          "type": "string",
          "description": "a Kubernetes context for which the profile is auto-activated.",
          "x-intellij-html-description": "a Kubernetes context for which the profile is auto-activated.\n",
          "examples": [
            "minikube"
          ]
        }
      },
      "preferredOrder": [
        "env",
        "kubeContext",
        "command"
      ],
      "additionalProperties": false,
      "description": "criteria by which a profile is auto-activated.",
      "x-intellij-html-description": "criteria by which a profile is auto-activated.\n"
    },
    "Artifact": {
      "required": [
        "image"
      ],
      "anyOf": [
        {
          "properties": {
            "context": {
              "type": "string",
              "description": "directory where the artifact's sources are to be found.",
              "x-intellij-html-description": "directory where the artifact's sources are to be found.\n",
              "default": "."
            },
            "image": {
              "type": "string",
              "description": "name of the image to be built.",
              "x-intellij-html-description": "name of the image to be built.\n",
              "examples": [
                "gcr.io/k8s-skaffold/example"
              ]
            },
            "plugin": {
              "$ref": "#/definitions/BuilderPlugin",
              "description": "plugin used to build this artifact.",
              "x-intellij-html-description": "plugin used to build this artifact.\n"
            },
            "sync": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object",
              "description": "(alpha) lists local files that can be synced to remote pods instead of triggering an image build when modified. This is a mapping of local files to sync to remote folders.",
              "x-intellij-html-description": "(alpha) lists local files that can be synced to remote pods instead of triggering an image build when modified. This is a mapping of local files to sync to remote folders.\n",
              "default": "{}",
              "examples": [
                "{\"*.py\": \".\", \"css/**/*.css\": \"app/css\"}"
              ]
            }
          },
          "preferredOrder": [
            "image",
            "context",
            "sync",
            "plugin"
          ],
          "additionalProperties": false
        },
        {
          "properties": {
            "context": {
              "type": "string",
              "description": "directory where the artifact's sources are to be found.",
              "x-intellij-html-description": "directory where the artifact's sources are to be found.\n",
              "default": "."
            },
            "docker": {
              "$ref": "#/definitions/DockerArtifact",
              "description": "(beta) describes an artifact built from a Dockerfile.",
              "x-intellij-html-description": "(beta) describes an artifact built from a Dockerfile.\n"
            },
            "image": {
              "type": "string",
              "description": "name of the image to be built.",
              "x-intellij-html-description": "name of the image to be built.\n",
              "examples": [
                "gcr.io/k8s-skaffold/example"
              ]
            },
            "plugin": {
              "$ref": "#/definitions/BuilderPlugin",
              "description": "plugin used to build this artifact.",
              "x-intellij-html-description": "plugin used to build this artifact.\n"
            },
            "sync": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object",
              "description": "(alpha) lists local files that can be synced to remote pods instead of triggering an image build when modified. This is a mapping of local files to sync to remote folders.",
              "x-intellij-html-description": "(alpha) lists local files that can be synced to remote pods instead of triggering an image build when modified. This is a mapping of local files to sync to remote folders.\n",
              "default": "{}",
              "examples": [
                "{\"*.py\": \".\", \"css/**/*.css\": \"app/css\"}"
              ]
            }
          },
          "preferredOrder": [
            "image",
            "context",
            "sync",
            "plugin",
            "docker"
          ],
          "additionalProperties": false
        },
        {
          "properties": {
            "bazel": {
              "$ref": "#/definitions/BazelArtifact",
              "description": "(beta) requires bazel CLI to be installed and the sources to contain [Bazel](https://bazel.build/) configuration files.",
              "x-intellij-html-description": "(beta) requires bazel CLI to be installed and the sources to contain <a href=\"https://bazel.build/\">Bazel</a> configuration files.\n"
            },
            "context": {
              "type": "string",
              "description": "directory where the artifact's sources are to be found.",
              "x-intellij-html-description": "directory where the artifact's sources are to be found.\n",
              "default": "."
            },
            "image": {
              "type": "string",
              "description": "name of the image to be built.",
              "x-intellij-html-description": "name of the image to be built.\n",
              "examples": [
                "gcr.io/k8s-skaffold/example"
              ]
            },
            "plugin": {
              "$ref": "#/definitions/BuilderPlugin",
              "description": "plugin used to build this artifact.",
              "x-intellij-html-description": "plugin used to build this artifact.\n"
            },
            "sync": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object",
              "description": "(alpha) lists local files that can be synced to remote pods instead of triggering an image build when modified. This is a mapping of local files to sync to remote folders.",
              "x-intellij-html-description": "(alpha) lists local files that can be synced to remote pods instead of triggering an image build when modified. This is a mapping of local files to sync to remote folders.\n",
              "default": "{}",
              "examples": [
                "{\"*.py\": \".\", \"css/**/*.css\": \"app/css\"}"
              ]
            }
          },
          "preferredOrder": [
            "image",
            "context",
            "sync",
            "plugin",
            "bazel"
          ],
          "additionalProperties": false
        },
        {
          "properties": {
            "context": {
              "type": "string",
              "description": "directory where the artifact's sources are to be found.",
              "x-intellij-html-description": "directory where the artifact's sources are to be found.\n",
              "default": "."
            },
            "image": {
              "type": "string",
              "description": "name of the image to be built.",
              "x-intellij-html-description": "name of the image to be built.\n",
              "examples": [
                "gcr.io/k8s-skaffold/example"
              ]
            },
            "jibMaven": {
              "$ref": "#/definitions/JibMavenArtifact",
              "description": "(alpha) builds images using the [Jib plugin for Maven](https://github.com/GoogleContainerTools/jib/tree/master/jib-maven-plugin).",
              "x-intellij-html-description": "(alpha) builds images using the <a href=\"https://github.com/GoogleContainerTools/jib/tree/master/jib-maven-plugin\">Jib plugin for Maven</a>.\n"
            },
            "plugin": {
              "$ref": "#/definitions/BuilderPlugin",
              "description": "plugin used to build this artifact.",
              "x-intellij-html-description": "plugin used to build this artifact.\n"
            },
            "sync": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object",
              "description": "(alpha) lists local files that can be synced to remote pods instead of triggering an image build when modified. This is a mapping of local files to sync to remote folders.",
              "x-intellij-html-description": "(alpha) lists local files that can be synced to remote pods instead of triggering an image build when modified. This is a mapping of local files to sync to remote folders.\n",
              "default": "{}",
              "examples": [
                "{\"*.py\": \".\", \"css/**/*.css\": \"app/css\"}"
              ]
            }
          },
          "preferredOrder": [
            "image",
            "context",
            "sync",
            "plugin",
            "jibMaven"
          ],
          "additionalProperties": false
        },
        {
          "properties": {
            "context": {
              "type": "string",
              "description": "directory where the artifact's sources are to be found.",
              "x-intellij-html-description": "directory where the artifact's sources are to be found.\n",
              "default": "."
            },
            "image": {
              "type": "string",
              "description": "name of the image to be built.",
              "x-intellij-html-description": "name of the image to be built.\n",
              "examples": [
                "gcr.io/k8s-skaffold/example"
              ]
            },
            "jibGradle": {
              "$ref": "#/definitions/JibGradleArtifact",
              "description": "(alpha) builds images using the [Jib plugin for Gradle](https://github.com/GoogleContainerTools/jib/tree/master/jib-gradle-plugin).",
              "x-intellij-html-description": "(alpha) builds images using the <a href=\"https://github.com/GoogleContainerTools/jib/tree/master/jib-gradle-plugin\">Jib plugin for Gradle</a>.\n"
            },
            "plugin": {
              "$ref": "#/definitions/BuilderPlugin",
              "description": "plugin used to build this artifact.",
              "x-intellij-html-description": "plugin used to build this artifact.\n"
            },
            "sync": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object",
              "description": "(alpha) lists local files that can be synced to remote pods instead of triggering an image build when modified. This is a mapping of local files to sync to remote folders.",
              "x-intellij-html-description": "(alpha) lists local files that can be synced to remote pods instead of triggering an image build when modified. This is a mapping of local files to sync to remote folders.\n",
              "default": "{}",
              "examples": [
                "{\"*.py\": \".\", \"css/**/*.css\": \"app/css\"}"
              ]
            }
          },
          "preferredOrder": [
            "image",
            "context",
            "sync",
            "plugin",
            "jibGradle"
          ],
          "additionalProperties": false
        }
      ],
      "description": "items that need to be built, along with the context in which they should be built.",
      "x-intellij-html-description": "items that need to be built, along with the context in which they should be built.\n"
    },
    "ArtifactType": {
      "properties": {
        "bazel": {
          "$ref": "#/definitions/BazelArtifact",
          "description": "(beta) requires bazel CLI to be installed and the sources to contain [Bazel](https://bazel.build/) configuration files.",
          "x-intellij-html-description": "(beta) requires bazel CLI to be installed and the sources to contain <a href=\"https://bazel.build/\">Bazel</a> configuration files.\n"
        },
        "docker": {
          "$ref": "#/definitions/DockerArtifact",
          "description": "(beta) describes an artifact built from a Dockerfile.",
          "x-intellij-html-description": "(beta) describes an artifact built from a Dockerfile.\n"
        },
        "jibGradle": {
          "$ref": "#/definitions/JibGradleArtifact",
          "description": "(alpha) builds images using the [Jib plugin for Gradle](https://github.com/GoogleContainerTools/jib/tree/master/jib-gradle-plugin).",
          "x-intellij-html-description": "(alpha) builds images using the <a href=\"https://github.com/GoogleContainerTools/jib/tree/master/jib-gradle-plugin\">Jib plugin for Gradle</a>.\n"
        },
        "jibMaven": {
          "$ref": "#/definitions/JibMavenArtifact",
          "description": "(alpha) builds images using the [Jib plugin for Maven](https://github.com/GoogleContainerTools/jib/tree/master/jib-maven-plugin).",
          "x-intellij-html-description": "(alpha) builds images using the <a href=\"https://github.com/GoogleContainerTools/jib/tree/master/jib-maven-plugin\">Jib plugin for Maven</a>.\n"
        }
      },
      "preferredOrder": [
        "docker",
        "bazel",
        "jibMaven",
        "jibGradle"
      ],
      "additionalProperties": false
    },
    "BazelArtifact": {
      "required": [
        "target"
      ],
      "properties": {
        "args": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "additional args to pass to `bazel build`.",
          "x-intellij-html-description": "additional args to pass to <code>bazel build</code>.\n",
          "default": "[]",
          "examples": [
            "[\"-flag\", \"--otherflag\"]"
          ]
        },
        "target": {
          "type": "string",
          "description": "`bazel build` target to run.",
          "x-intellij-html-description": "<code>bazel build</code> target to run.\n",
          "examples": [
            "//:skaffold_example.tar"
          ]
        }
      },
      "preferredOrder": [
        "target",
        "args"
      ],
      "additionalProperties": false,
      "description": "(beta) describes an artifact built with [Bazel](https://bazel.build/).",
      "x-intellij-html-description": "(beta) describes an artifact built with <a href=\"https://bazel.build/\">Bazel</a>.\n"
    },
    "BuildConfig": {
      "anyOf": [
        {
          "properties": {
            "artifacts": {
              "items": {
                "$ref": "#/definitions/Artifact"
              },
              "type": "array",
              "description": "the images you're going to be building.",
              "x-intellij-html-description": "the images you're going to be building.\n"
            },
            "executionEnvironment": {
              "$ref": "#/definitions/ExecutionEnvironment",
              "description": "environment in which the build should run. Possible values: googleCloudBuild.",
              "x-intellij-html-description": "environment in which the build should run. Possible values: googleCloudBuild.\n"
            },
            "tagPolicy": {
              "$ref": "#/definitions/TagPolicy",
              "description": "(beta) determines how images are tagged. A few strategies are provided here, although you most likely won't need to care! If not specified, it defaults to `gitCommit: {}`.",
              "x-intellij-html-description": "(beta) determines how images are tagged. A few strategies are provided here, although you most likely won't need to care! If not specified, it defaults to <code>gitCommit: {}</code>.\n"
            }
          },
          "preferredOrder": [
            "artifacts",
            "tagPolicy",
            "executionEnvironment"
          ],
          "additionalProperties": false
        },
        {
          "properties": {
            "artifacts": {
              "items": {
                "$ref": "#/definitions/Artifact"
              },
              "type": "array",
              "description": "the images you're going to be building.",
              "x-intellij-html-description": "the images you're going to be building.\n"
            },
            "executionEnvironment": {
              "$ref": "#/definitions/ExecutionEnvironment",
              "description": "environment in which the build should run. Possible values: googleCloudBuild.",
              "x-intellij-html-description": "environment in which the build should run. Possible values: googleCloudBuild.\n"
            },
            "local": {
              "$ref": "#/definitions/LocalBuild",
              "description": "(beta) describes how to do a build on the local docker daemon and optionally push to a repository.",
              "x-intellij-html-description": "(beta) describes how to do a build on the local docker daemon and optionally push to a repository.\n"
            },
            "tagPolicy": {
              "$ref": "#/definitions/TagPolicy",
              "description": "(beta) determines how images are tagged. A few strategies are provided here, although you most likely won't need to care! If not specified, it defaults to `gitCommit: {}`.",
              "x-intellij-html-description": "(beta) determines how images are tagged. A few strategies are provided here, although you most likely won't need to care! If not specified, it defaults to <code>gitCommit: {}</code>.\n"
            }
          },
          "preferredOrder": [
            "artifacts",
            "tagPolicy",
            "executionEnvironment",
            "local"
          ],
          "additionalProperties": false
        },
        {
          "properties": {
            "artifacts": {
              "items": {
                "$ref": "#/definitions/Artifact"
              },
              "type": "array",
              "description": "the images you're going to be building.",
              "x-intellij-html-description": "the images you're going to be building.\n"
            },
            "executionEnvironment": {
              "$ref": "#/definitions/ExecutionEnvironment",
              "description": "environment in which the build should run. Possible values: googleCloudBuild.",
              "x-intellij-html-description": "environment in which the build should run. Possible values: googleCloudBuild.\n"
            },
            "googleCloudBuild": {
              "$ref": "#/definitions/GoogleCloudBuild",
              "description": "(beta) describes how to do a remote build on [Google Cloud Build](https://cloud.google.com/cloud-build/).",
              "x-intellij-html-description": "(beta) describes how to do a remote build on <a href=\"https://cloud.google.com/cloud-build/\">Google Cloud Build</a>.\n"
            },
            "tagPolicy": {
              "$ref": "#/definitions/TagPolicy",
              "description": "(beta) determines how images are tagged. A few strategies are provided here, although you most likely won't need to care! If not specified, it defaults to `gitCommit: {}`.",
              "x-intellij-html-description": "(beta) determines how images are tagged. A few strategies are provided here, although you most likely won't need to care! If not specified, it defaults to <code>gitCommit: {}</code>.\n"
            }
          },
          "preferredOrder": [
            "artifacts",
            "tagPolicy",
            "executionEnvironment",
            "googleCloudBuild"
          ],
          "additionalProperties": false
        },
        {
          "properties": {
            "artifacts": {
              "items": {
                "$ref": "#/definitions/Artifact"
              },
              "type": "array",
              "description": "the images you're going to be building.",
              "x-intellij-html-description": "the images you're going to be building.\n"
            },
            "executionEnvironment": {
              "$ref": "#/definitions/ExecutionEnvironment",
              "description": "environment in which the build should run. Possible values: googleCloudBuild.",
              "x-intellij-html-description": "environment in which the build should run. Possible values: googleCloudBuild.\n"
            },
            "kaniko": {
              "$ref": "#/definitions/KanikoBuild",
              "description": "(beta) describes how to do an on-cluster build using [Kaniko](https://github.com/GoogleContainerTools/kaniko).",
              "x-intellij-html-description": "(beta) describes how to do an on-cluster build using <a href=\"https://github.com/GoogleContainerTools/kaniko\">Kaniko</a>.\n"
            },
            "tagPolicy": {
              "$ref": "#/definitions/TagPolicy",
              "description": "(beta) determines how images are tagged. A few strategies are provided here, although you most likely won't need to care! If not specified, it defaults to `gitCommit: {}`.",
              "x-intellij-html-description": "(beta) determines how images are tagged. A few strategies are provided here, although you most likely won't need to care! If not specified, it defaults to <code>gitCommit: {}</code>.\n"
            }
          },
          "preferredOrder": [
            "artifacts",
            "tagPolicy",
            "executionEnvironment",
            "kaniko"
          ],
          "additionalProperties": false
        }
      ],
      "description": "contains all the configuration for the build steps.",
      "x-intellij-html-description": "contains all the configuration for the build steps.\n"
    },
    "BuildType": {
      "properties": {
        "googleCloudBuild": {
          "$ref": "#/definitions/GoogleCloudBuild",
          "description": "(beta) describes how to do a remote build on [Google Cloud Build](https://cloud.google.com/cloud-build/).",
          "x-intellij-html-description": "(beta) describes how to do a remote build on <a href=\"https://cloud.google.com/cloud-build/\">Google Cloud Build</a>.\n"
        },
        "kaniko": {
          "$ref": "#/definitions/KanikoBuild",
          "description": "(beta) describes how to do an on-cluster build using [Kaniko](https://github.com/GoogleContainerTools/kaniko).",
          "x-intellij-html-description": "(beta) describes how to do an on-cluster build using <a href=\"https://github.com/GoogleContainerTools/kaniko\">Kaniko</a>.\n"
        },
        "local": {
          "$ref": "#/definitions/LocalBuild",
          "description": "(beta) describes how to do a build on the local docker daemon and optionally push to a repository.",
          "x-intellij-html-description": "(beta) describes how to do a build on the local docker daemon and optionally push to a repository.\n"
        }
      },
      "preferredOrder": [
        "local",
        "googleCloudBuild",
        "kaniko"
      ],
      "additionalProperties": false,
      "description": "contains the specific implementation and parameters needed for the build step. Only one field should be populated.",
      "x-intellij-html-description": "contains the specific implementation and parameters needed for the build step. Only one field should be populated.\n"
    },
    "BuilderPlugin": {
      "properties": {
        "name": {
          "type": "string",
          "description": "name of the build plugin.",
          "x-intellij-html-description": "name of the build plugin.\n"
        },
        "properties": {
          "additionalProperties": {},
          "type": "object",
          "description": "key-value pairs passed to the plugin.",
          "x-intellij-html-description": "key-value pairs passed to the plugin.\n",
          "default": "{}"
        }
      },
      "preferredOrder": [
        "name",
        "properties"
      ],
      "additionalProperties": false,
      "description": "contains all fields necessary for specifying a build plugin.",
      "x-intellij-html-description": "contains all fields necessary for specifying a build plugin.\n"
    },
    "DateTimeTagger": {
      "properties": {
        "format": {
          "type": "string",
          "description": "formats the date and time. See [#Time.Format](https://golang.org/pkg/time/#Time.Format).",
          "x-intellij-html-description": "formats the date and time. See <a href=\"https://golang.org/pkg/time/#Time.Format\">#Time.Format</a>.\n",
          "default": "2006-01-02_15-04-05.999_MST"
        },
        "timezone": {
          "type": "string",
          "description": "sets the timezone for the date and time. See [Time.LoadLocation](https://golang.org/pkg/time/#Time.LoadLocation). Defaults to the local timezone.",
          "x-intellij-html-description": "sets the timezone for the date and time. See <a href=\"https://golang.org/pkg/time/#Time.LoadLocation\">Time.LoadLocation</a>. Defaults to the local timezone.\n"
        }
      },
      "preferredOrder": [
        "format",
        "timezone"
      ],
      "additionalProperties": false,
      "description": "(beta) tags images with the build timestamp.",
      "x-intellij-html-description": "(beta) tags images with the build timestamp.\n"
    },
    "DeployConfig": {
      "anyOf": [
        {
          "additionalProperties": false
        },
        {
          "properties": {
            "helm": {
              "$ref": "#/definitions/HelmDeploy",
              "description": "(beta) uses the `helm` CLI to apply the charts to the cluster.",
              "x-intellij-html-description": "(beta) uses the <code>helm</code> CLI to apply the charts to the cluster.\n"
            }
          },
          "preferredOrder": [
            "helm"
          ],
          "additionalProperties": false
        },
        {
          "properties": {
            "kubectl": {
              "$ref": "#/definitions/KubectlDeploy",
              "description": "(beta) uses a client side `kubectl apply` to deploy manifests. You'll need a `kubectl` CLI version installed that's compatible with your cluster.",
              "x-intellij-html-description": "(beta) uses a client side <code>kubectl apply</code> to deploy manifests. You'll need a <code>kubectl</code> CLI version installed that's compatible with your cluster.\n"
            }
          },
          "preferredOrder": [
            "kubectl"
          ],
          "additionalProperties": false
        },
        {
          "properties": {
            "kustomize": {
              "$ref": "#/definitions/KustomizeDeploy",
              "description": "(beta) uses the `kustomize` CLI to \"patch\" a deployment for a target environment.",
              "x-intellij-html-description": "(beta) uses the <code>kustomize</code> CLI to &quot;patch&quot; a deployment for a target environment.\n"
            }
          },
          "preferredOrder": [
            "kustomize"
          ],
          "additionalProperties": false
        }
      ],
      "description": "contains all the configuration needed by the deploy steps.",
      "x-intellij-html-description": "contains all the configuration needed by the deploy steps.\n"
    },
    "DeployType": {
      "properties": {
        "helm": {
          "$ref": "#/definitions/HelmDeploy",
          "description": "(beta) uses the `helm` CLI to apply the charts to the cluster.",
          "x-intellij-html-description": "(beta) uses the <code>helm</code> CLI to apply the charts to the cluster.\n"
        },
        "kubectl": {
          "$ref": "#/definitions/KubectlDeploy",
          "description": "(beta) uses a client side `kubectl apply` to deploy manifests. You'll need a `kubectl` CLI version installed that's compatible with your cluster.",
          "x-intellij-html-description": "(beta) uses a client side <code>kubectl apply</code> to deploy manifests. You'll need a <code>kubectl</code> CLI version installed that's compatible with your cluster.\n"
        },
        "kustomize": {
          "$ref": "#/definitions/KustomizeDeploy",
          "description": "(beta) uses the `kustomize` CLI to \"patch\" a deployment for a target environment.",
          "x-intellij-html-description": "(beta) uses the <code>kustomize</code> CLI to &quot;patch&quot; a deployment for a target environment.\n"
        }
      },
      "preferredOrder": [
        "helm",
        "kubectl",
        "kustomize"
      ],
      "additionalProperties": false,
      "description": "contains the specific implementation and parameters needed for the deploy step. Only one field should be populated.",
      "x-intellij-html-description": "contains the specific implementation and parameters needed for the deploy step. Only one field should be populated.\n"
    },
    "DockerArtifact": {
      "properties": {
        "buildArgs": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "arguments passed to the docker build.",
          "x-intellij-html-description": "arguments passed to the docker build.\n",
          "default": "{}",
          "examples": [
            "{\"key1\": \"value1\", \"key2\": \"value2\"}"
          ]
        },
        "cacheFrom": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "the Docker images to consider as cache sources.",
          "x-intellij-html-description": "the Docker images to consider as cache sources.\n",
          "default": "[]",
          "examples": [
            "[\"golang:1.10.1-alpine3.7\", \"alpine:3.7\"]"
          ]
        },
        "dockerfile": {
          "type": "string",
          "description": "locates the Dockerfile relative to workspace.",
          "x-intellij-html-description": "locates the Dockerfile relative to workspace.\n",
          "default": "Dockerfile"
        },
        "target": {
          "type": "string",
          "description": "Dockerfile target name to build.",
          "x-intellij-html-description": "Dockerfile target name to build.\n"
        }
      },
      "preferredOrder": [
        "dockerfile",
        "target",
        "buildArgs",
        "cacheFrom"
      ],
      "additionalProperties": false,
      "description": "(beta) describes an artifact built from a Dockerfile, usually using `docker build`.",
      "x-intellij-html-description": "(beta) describes an artifact built from a Dockerfile, usually using <code>docker build</code>.\n"
    },
    "DockerConfig": {
      "properties": {
        "path": {
          "type": "string",
          "description": "path to the docker `config.json`.",
          "x-intellij-html-description": "path to the docker <code>config.json</code>.\n"
        },
        "secretName": {
          "type": "string",
          "description": "Kubernetes secret that will hold the Docker configuration.",
          "x-intellij-html-description": "Kubernetes secret that will hold the Docker configuration.\n"
        }
      },
      "preferredOrder": [
        "path",
        "secretName"
      ],
      "additionalProperties": false,
      "description": "contains information about the docker `config.json` to mount.",
      "x-intellij-html-description": "contains information about the docker <code>config.json</code> to mount.\n"
    },
    "EnvTemplateTagger": {
      "required": [
        "template"
      ],
      "properties": {
        "template": {
          "type": "string",
          "description": "used to produce the image name and tag. See golang [text/template](https://golang.org/pkg/text/template/). The template is executed against the current environment, with those variables injected:   IMAGE_NAME   |  Name of the image being built, as supplied in the artifacts section.",
          "x-intellij-html-description": "used to produce the image name and tag. See golang <a href=\"https://golang.org/pkg/text/template/\">text/template</a>. The template is executed against the current environment, with those variables injected:   IMAGE_NAME   |  Name of the image being built, as supplied in the artifacts section.\n",
          "examples": [
            "{{.RELEASE}}-{{.IMAGE_NAME}}"
          ]
        }
      },
      "preferredOrder": [
        "template"
      ],
      "additionalProperties": false,
      "description": "(beta) tags images with a configurable template string.",
      "x-intellij-html-description": "(beta) tags images with a configurable template string.\n"
    },
    "ExecEnvironment": {
      "type": "string"
    },
    "ExecutionEnvironment": {
      "properties": {
        "name": {
          "$ref": "#/definitions/ExecEnvironment",
          "description": "name of the environment.",
          "x-intellij-html-description": "name of the environment.\n"
        },
        "properties": {
          "additionalProperties": {},
          "type": "object",
          "description": "key-value pairs passed to the environment.",
          "x-intellij-html-description": "key-value pairs passed to the environment.\n",
          "default": "{}"
        }
      },
      "preferredOrder": [
        "name",
        "properties"
      ],
      "additionalProperties": false,
      "description": "environment in which the build should run (ex. local or in-cluster, etc.).",
      "x-intellij-html-description": "environment in which the build should run (ex. local or in-cluster, etc.).\n"
    },
    "GitTagger": {
      "description": "(beta) tags images with the git tag or commit of the artifact's workspace.",
      "x-intellij-html-description": "(beta) tags images with the git tag or commit of the artifact's workspace.\n"
    },
    "GoogleCloudBuild": {
      "properties": {
        "diskSizeGb": {
          "type": "number",
          "description": "disk size of the VM that runs the build. See [Cloud Build Reference](https://cloud.google.com/cloud-build/docs/api/reference/rest/v1/projects.builds#buildoptions).",
          "x-intellij-html-description": "disk size of the VM that runs the build. See <a href=\"https://cloud.google.com/cloud-build/docs/api/reference/rest/v1/projects.builds#buildoptions\">Cloud Build Reference</a>.\n"
        },
        "dockerImage": {
          "type": "string",
          "description": "image that runs a Docker build. See [Cloud Builders](https://cloud.google.com/cloud-build/docs/cloud-builders).",
          "x-intellij-html-description": "image that runs a Docker build. See <a href=\"https://cloud.google.com/cloud-build/docs/cloud-builders\">Cloud Builders</a>.\n",
          "default": "gcr.io/cloud-builders/docker"
        },
        "gradleImage": {
          "type": "string",
          "description": "image that runs a Gradle build. See [Cloud Builders](https://cloud.google.com/cloud-build/docs/cloud-builders).",
          "x-intellij-html-description": "image that runs a Gradle build. See <a href=\"https://cloud.google.com/cloud-build/docs/cloud-builders\">Cloud Builders</a>.\n",
          "default": "gcr.io/cloud-builders/gradle"
        },
        "machineType": {
          "type": "string",
          "description": "type of the VM that runs the build. See [Cloud Build Reference](https://cloud.google.com/cloud-build/docs/api/reference/rest/v1/projects.builds#buildoptions).",
          "x-intellij-html-description": "type of the VM that runs the build. See <a href=\"https://cloud.google.com/cloud-build/docs/api/reference/rest/v1/projects.builds#buildoptions\">Cloud Build Reference</a>.\n"
        },
        "mavenImage": {
          "type": "string",
          "description": "image that runs a Maven build. See [Cloud Builders](https://cloud.google.com/cloud-build/docs/cloud-builders).",
          "x-intellij-html-description": "image that runs a Maven build. See <a href=\"https://cloud.google.com/cloud-build/docs/cloud-builders\">Cloud Builders</a>.\n",
          "default": "gcr.io/cloud-builders/mvn"
        },
        "projectId": {
          "type": "string",
          "description": "ID of your Cloud Platform Project. If it is not provided, Skaffold will guess it from the image name. For example, given the artifact image name `gcr.io/myproject/image`, Skaffold will use the `myproject` GCP project.",
          "x-intellij-html-description": "ID of your Cloud Platform Project. If it is not provided, Skaffold will guess it from the image name. For example, given the artifact image name <code>gcr.io/myproject/image</code>, Skaffold will use the <code>myproject</code> GCP project.\n"
        },
        "timeout": {
          "type": "string",
          "description": "amount of time (in seconds) that this build should be allowed to run. See [Cloud Build Reference](https://cloud.google.com/cloud-build/docs/api/reference/rest/v1/projects.builds#resource-build).",
          "x-intellij-html-description": "amount of time (in seconds) that this build should be allowed to run. See <a href=\"https://cloud.google.com/cloud-build/docs/api/reference/rest/v1/projects.builds#resource-build\">Cloud Build Reference</a>.\n"
        }
      },
      "preferredOrder": [
        "projectId",
        "diskSizeGb",
        "machineType",
        "timeout",
        "dockerImage",
        "mavenImage",
        "gradleImage"
      ],
      "additionalProperties": false,
      "description": "(beta) describes how to do a remote build on [Google Cloud Build](https://cloud.google.com/cloud-build/docs/). Docker and Jib artifacts can be built on Cloud Build. The `projectId` needs to be provided and the currently logged in user should be given permissions to trigger new builds.",
      "x-intellij-html-description": "(beta) describes how to do a remote build on <a href=\"https://cloud.google.com/cloud-build/docs/\">Google Cloud Build</a>. Docker and Jib artifacts can be built on Cloud Build. The <code>projectId</code> needs to be provided and the currently logged in user should be given permissions to trigger new builds.\n"
    },
    "HelmConventionConfig": {
      "description": "image config in the syntax of image.repository and image.tag.",
      "x-intellij-html-description": "image config in the syntax of image.repository and image.tag.\n"
    },
    "HelmDeploy": {
      "required": [
        "releases"
      ],
      "properties": {
        "releases": {
          "items": {
            "$ref": "#/definitions/HelmRelease"
          },
          "type": "array",
          "description": "a list of Helm releases.",
          "x-intellij-html-description": "a list of Helm releases.\n"
        }
      },
      "preferredOrder": [
        "releases"
      ],
      "additionalProperties": false,
      "description": "(beta) uses the `helm` CLI to apply the charts to the cluster.",
      "x-intellij-html-description": "(beta) uses the <code>helm</code> CLI to apply the charts to the cluster.\n"
    },
    "HelmFQNConfig": {
      "properties": {
        "property": {
          "type": "string",
          "description": "defines the image config.",
          "x-intellij-html-description": "defines the image config.\n"
        }
      },
      "preferredOrder": [
        "property"
      ],
      "additionalProperties": false,
      "description": "image config to use the FullyQualifiedImageName as param to set.",
      "x-intellij-html-description": "image config to use the FullyQualifiedImageName as param to set.\n"
    },
    "HelmImageConfig": {
      "properties": {
        "fqn": {
          "$ref": "#/definitions/HelmFQNConfig",
          "description": "image configuration uses the syntax `IMAGE-NAME=IMAGE-REPOSITORY:IMAGE-TAG`.",
          "x-intellij-html-description": "image configuration uses the syntax <code>IMAGE-NAME=IMAGE-REPOSITORY:IMAGE-TAG</code>.\n"
        },
        "helm": {
          "$ref": "#/definitions/HelmConventionConfig",
          "description": "image configuration uses the syntax `IMAGE-NAME.repository=IMAGE-REPOSITORY, IMAGE-NAME.tag=IMAGE-TAG`.",
          "x-intellij-html-description": "image configuration uses the syntax <code>IMAGE-NAME.repository=IMAGE-REPOSITORY, IMAGE-NAME.tag=IMAGE-TAG</code>.\n"
        }
      },
      "preferredOrder": [
        "fqn",
        "helm"
      ],
      "additionalProperties": false
    },
    "HelmImageStrategy": {
      "anyOf": [
        {
          "additionalProperties": false
        },
        {
          "properties": {
            "fqn": {
              "$ref": "#/definitions/HelmFQNConfig",
              "description": "image configuration uses the syntax `IMAGE-NAME=IMAGE-REPOSITORY:IMAGE-TAG`.",
              "x-intellij-html-description": "image configuration uses the syntax <code>IMAGE-NAME=IMAGE-REPOSITORY:IMAGE-TAG</code>.\n"
            }
          },
          "preferredOrder": [
            "fqn"
          ],
          "additionalProperties": false
        },
        {
          "properties": {
            "helm": {
              "$ref": "#/definitions/HelmConventionConfig",
              "description": "image configuration uses the syntax `IMAGE-NAME.repository=IMAGE-REPOSITORY, IMAGE-NAME.tag=IMAGE-TAG`.",
              "x-intellij-html-description": "image configuration uses the syntax <code>IMAGE-NAME.repository=IMAGE-REPOSITORY, IMAGE-NAME.tag=IMAGE-TAG</code>.\n"
            }
          },
          "preferredOrder": [
            "helm"
          ],
          "additionalProperties": false
        }
      ],
      "description": "adds image configurations to the Helm `values` file.",
      "x-intellij-html-description": "adds image configurations to the Helm <code>values</code> file.\n"
    },
    "HelmPackaged": {
      "properties": {
        "appVersion": {
          "type": "string",
          "description": "sets the `appVersion` on the chart to this version.",
          "x-intellij-html-description": "sets the <code>appVersion</code> on the chart to this version.\n"
        },
        "version": {
          "type": "string",
          "description": "sets the `version` on the chart to this semver version.",
          "x-intellij-html-description": "sets the <code>version</code> on the chart to this semver version.\n"
        }
      },
      "preferredOrder": [
        "version",
        "appVersion"
      ],
      "additionalProperties": false,
      "description": "parameters for packaging helm chart (`helm package`).",
      "x-intellij-html-description": "parameters for packaging helm chart (<code>helm package</code>).\n"
    },
    "HelmRelease": {
      "required": [
        "name",
        "chartPath"
      ],
      "properties": {
        "chartPath": {
          "type": "string",
          "description": "path to the Helm chart.",
          "x-intellij-html-description": "path to the Helm chart.\n"
        },
        "imageStrategy": {
          "$ref": "#/definitions/HelmImageStrategy",
          "description": "adds image configurations to the Helm `values` file.",
          "x-intellij-html-description": "adds image configurations to the Helm <code>values</code> file.\n"
        },
        "name": {
          "type": "string",
          "description": "name of the Helm release.",
          "x-intellij-html-description": "name of the Helm release.\n"
        },
        "namespace": {
          "type": "string",
          "description": "Kubernetes namespace.",
          "x-intellij-html-description": "Kubernetes namespace.\n"
        },
        "overrides": {
          "additionalProperties": {},
          "type": "object",
          "description": "key-value pairs. If present, Skaffold will build a Helm `values` file that overrides the original and use it to call Helm CLI (`--f` flag).",
          "x-intellij-html-description": "key-value pairs. If present, Skaffold will build a Helm <code>values</code> file that overrides the original and use it to call Helm CLI (<code>--f</code> flag).\n",
          "default": "{}"
        },
        "packaged": {
          "$ref": "#/definitions/HelmPackaged",
          "description": "parameters for packaging helm chart (`helm package`).",
          "x-intellij-html-description": "parameters for packaging helm chart (<code>helm package</code>).\n"
        },
        "recreatePods": {
          "type": "boolean",
          "description": "if `true`, Skaffold will send `--recreate-pods` flag to Helm CLI.",
          "x-intellij-html-description": "if <code>true</code>, Skaffold will send <code>--recreate-pods</code> flag to Helm CLI.\n",
          "default": "false"
        },
        "setValueTemplates": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "key-value pairs. If present, Skaffold will try to parse the value part of each key-value pair using environment variables in the system, then send `--set` flag to Helm CLI and append all parsed pairs after the flag.",
          "x-intellij-html-description": "key-value pairs. If present, Skaffold will try to parse the value part of each key-value pair using environment variables in the system, then send <code>--set</code> flag to Helm CLI and append all parsed pairs after the flag.\n",
          "default": "{}"
        },
        "setValues": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "key-value pairs. If present, Skaffold will send `--set` flag to Helm CLI and append all pairs after the flag.",
          "x-intellij-html-description": "key-value pairs. If present, Skaffold will send <code>--set</code> flag to Helm CLI and append all pairs after the flag.\n",
          "default": "{}"
        },
        "skipBuildDependencies": {
          "type": "boolean",
          "description": "should build dependencies be skipped.",
          "x-intellij-html-description": "should build dependencies be skipped.\n",
          "default": "false"
        },
        "values": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "key-value pairs supplementing the Helm `values` file\".",
          "x-intellij-html-description": "key-value pairs supplementing the Helm <code>values</code> file&quot;.\n",
          "default": "{}"
        },
        "valuesFiles": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "paths to the Helm `values` files\".",
          "x-intellij-html-description": "paths to the Helm <code>values</code> files&quot;.\n",
          "default": "[]"
        },
        "version": {
          "type": "string",
          "description": "version of the chart.",
          "x-intellij-html-description": "version of the chart.\n"
        },
        "wait": {
          "type": "boolean",
          "description": "if `true`, Skaffold will send `--wait` flag to Helm CLI.",
          "x-intellij-html-description": "if <code>true</code>, Skaffold will send <code>--wait</code> flag to Helm CLI.\n",
          "default": "false"
        }
      },
      "preferredOrder": [
        "name",
        "chartPath",
        "valuesFiles",
        "values",
        "namespace",
        "version",
        "setValues",
        "setValueTemplates",
        "wait",
        "recreatePods",
        "skipBuildDependencies",
        "overrides",
        "packaged",
        "imageStrategy"
      ],
      "additionalProperties": false
    },
    "JSONPatch": {
      "required": [
        "path"
      ],
      "properties": {
        "from": {
          "type": "string",
          "description": "source position in the yaml, used for `copy` or `move` operations.",
          "x-intellij-html-description": "source position in the yaml, used for <code>copy</code> or <code>move</code> operations.\n"
        },
        "op": {
          "type": "string",
          "description": "operation carried by the patch: `add`, `remove`, `replace`, `move`, `copy` or `test`.",
          "x-intellij-html-description": "operation carried by the patch: <code>add</code>, <code>remove</code>, <code>replace</code>, <code>move</code>, <code>copy</code> or <code>test</code>.\n",
          "default": "replace"
        },
        "path": {
          "type": "string",
          "description": "position in the yaml where the operation takes place. For example, this targets the `dockerfile` of the first artifact built.",
          "x-intellij-html-description": "position in the yaml where the operation takes place. For example, this targets the <code>dockerfile</code> of the first artifact built.\n",
          "examples": [
            "/build/artifacts/0/docker/dockerfile"
          ]
        },
        "value": {
          "type": "object",
          "description": "value to apply. Can be any portion of yaml.",
          "x-intellij-html-description": "value to apply. Can be any portion of yaml.\n"
        }
      },
      "preferredOrder": [
        "op",
        "path",
        "from",
        "value"
      ],
      "additionalProperties": false,
      "description": "patch to be applied by a profile.",
      "x-intellij-html-description": "patch to be applied by a profile.\n"
    },
    "JibGradleArtifact": {
      "properties": {
        "args": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "additional build flags passed to Gradle.",
          "x-intellij-html-description": "additional build flags passed to Gradle.\n",
          "default": "[]",
          "examples": [
            "[\"--no-build-cache\"]"
          ]
        },
        "project": {
          "type": "string",
          "description": "selects which Gradle project to build.",
          "x-intellij-html-description": "selects which Gradle project to build.\n"
        }
      },
      "preferredOrder": [
        "project",
        "args"
      ],
      "additionalProperties": false,
      "description": "(alpha) builds images using the [Jib plugin for Gradle](https://github.com/GoogleContainerTools/jib/tree/master/jib-gradle-plugin).",
      "x-intellij-html-description": "(alpha) builds images using the <a href=\"https://github.com/GoogleContainerTools/jib/tree/master/jib-gradle-plugin\">Jib plugin for Gradle</a>.\n"
    },
    "JibMavenArtifact": {
      "properties": {
        "args": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "additional build flags passed to Maven.",
          "x-intellij-html-description": "additional build flags passed to Maven.\n",
          "default": "[]",
          "examples": [
            "[\"-x\", \"-DskipTests\"]"
          ]
        },
        "module": {
          "type": "string",
          "description": "selects which Maven module to build, for a multi module project.",
          "x-intellij-html-description": "selects which Maven module to build, for a multi module project.\n"
        },
        "profile": {
          "type": "string",
          "description": "selects which Maven profile to activate.",
          "x-intellij-html-description": "selects which Maven profile to activate.\n"
        }
      },
      "preferredOrder": [
        "module",
        "profile",
        "args"
      ],
      "additionalProperties": false,
      "description": "(alpha) builds images using the [Jib plugin for Maven](https://github.com/GoogleContainerTools/jib/tree/master/jib-maven-plugin).",
      "x-intellij-html-description": "(alpha) builds images using the <a href=\"https://github.com/GoogleContainerTools/jib/tree/master/jib-maven-plugin\">Jib plugin for Maven</a>.\n"
    },
    "KanikoBuild": {
      "properties": {
        "buildContext": {
          "$ref": "#/definitions/KanikoBuildContext",
          "description": "defines where Kaniko gets the sources from.",
          "x-intellij-html-description": "defines where Kaniko gets the sources from.\n"
        },
        "cache": {
          "$ref": "#/definitions/KanikoCache",
          "description": "configures Kaniko caching. If a cache is specified, Kaniko will use a remote cache which will speed up builds.",
          "x-intellij-html-description": "configures Kaniko caching. If a cache is specified, Kaniko will use a remote cache which will speed up builds.\n"
        },
        "dockerConfig": {
          "$ref": "#/definitions/DockerConfig",
          "description": "describes how to mount the local Docker configuration into the Kaniko pod.",
          "x-intellij-html-description": "describes how to mount the local Docker configuration into the Kaniko pod.\n"
        },
        "flags": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "additional flags to be passed to Kaniko command line. See [Kaniko Additional Flags](https://github.com/GoogleContainerTools/kaniko#additional-flags).",
          "x-intellij-html-description": "additional flags to be passed to Kaniko command line. See <a href=\"https://github.com/GoogleContainerTools/kaniko#additional-flags\">Kaniko Additional Flags</a>.\n",
          "default": "[]"
        },
        "image": {
          "type": "string",
          "description": "Docker image used by the Kaniko pod. Defaults to the latest released version of `gcr.io/kaniko-project/executor`.",
          "x-intellij-html-description": "Docker image used by the Kaniko pod. Defaults to the latest released version of <code>gcr.io/kaniko-project/executor</code>.\n"
        },
        "namespace": {
          "type": "string",
          "description": "Kubernetes namespace. Defaults to current namespace in Kubernetes configuration.",
          "x-intellij-html-description": "Kubernetes namespace. Defaults to current namespace in Kubernetes configuration.\n"
        },
        "pullSecret": {
          "type": "string",
          "description": "path to the secret key file. See [Kaniko Documentation](https://github.com/GoogleContainerTools/kaniko#running-kaniko-in-a-kubernetes-cluster).",
          "x-intellij-html-description": "path to the secret key file. See <a href=\"https://github.com/GoogleContainerTools/kaniko#running-kaniko-in-a-kubernetes-cluster\">Kaniko Documentation</a>.\n"
        },
        "pullSecretName": {
          "type": "string",
          "description": "name of the Kubernetes secret for pulling the files from the build context and pushing the final image.",
          "x-intellij-html-description": "name of the Kubernetes secret for pulling the files from the build context and pushing the final image.\n",
          "default": "kaniko-secret"
        },
        "timeout": {
          "type": "string",
          "description": "amount of time (in seconds) that this build is allowed to run. Defaults to 20 minutes (`20m`).",
          "x-intellij-html-description": "amount of time (in seconds) that this build is allowed to run. Defaults to 20 minutes (<code>20m</code>).\n"
        }
      },
      "preferredOrder": [
        "buildContext",
        "cache",
        "flags",
        "pullSecret",
        "pullSecretName",
        "namespace",
        "timeout",
        "image",
        "dockerConfig"
      ],
      "additionalProperties": false,
      "description": "(beta) describes how to do an on-cluster build using [Kaniko](https://github.com/GoogleContainerTools/kaniko).",
      "x-intellij-html-description": "(beta) describes how to do an on-cluster build using <a href=\"https://github.com/GoogleContainerTools/kaniko\">Kaniko</a>.\n"
    },
    "KanikoBuildContext": {
      "properties": {
        "gcsBucket": {
          "type": "string",
          "description": "CGS bucket to which sources are uploaded by Skaffold. Kaniko will need access to that bucket to download the sources.",
          "x-intellij-html-description": "CGS bucket to which sources are uploaded by Skaffold. Kaniko will need access to that bucket to download the sources.\n"
        },
        "localDir": {
          "$ref": "#/definitions/LocalDir",
          "description": "configures how Kaniko mounts sources directly via an `emptyDir` volume.",
          "x-intellij-html-description": "configures how Kaniko mounts sources directly via an <code>emptyDir</code> volume.\n"
        }
      },
      "preferredOrder": [
        "gcsBucket",
        "localDir"
      ],
      "additionalProperties": false,
      "description": "contains the different fields available to specify a Kaniko build context.",
      "x-intellij-html-description": "contains the different fields available to specify a Kaniko build context.\n"
    },
    "KanikoCache": {
      "properties": {
        "repo": {
          "type": "string",
          "description": "a remote repository to store cached layers. If none is specified, one will be inferred from the image name. See [Kaniko Caching](https://github.com/GoogleContainerTools/kaniko#caching).",
          "x-intellij-html-description": "a remote repository to store cached layers. If none is specified, one will be inferred from the image name. See <a href=\"https://github.com/GoogleContainerTools/kaniko#caching\">Kaniko Caching</a>.\n"
        }
      },
      "preferredOrder": [
        "repo"
      ],
      "additionalProperties": false,
      "description": "configures Kaniko caching. If a cache is specified, Kaniko will use a remote cache which will speed up builds.",
      "x-intellij-html-description": "configures Kaniko caching. If a cache is specified, Kaniko will use a remote cache which will speed up builds.\n"
    },
    "KubectlDeploy": {
      "properties": {
        "flags": {
          "$ref": "#/definitions/KubectlFlags",
          "description": "additional flags passed to `kubectl`.",
          "x-intellij-html-description": "additional flags passed to <code>kubectl</code>.\n"
        },
        "manifests": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "the Kubernetes yaml or json manifests.",
          "x-intellij-html-description": "the Kubernetes yaml or json manifests.\n",
          "default": "[\"k8s/*.yaml\"]"
        },
        "remoteManifests": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Kubernetes manifests in remote clusters.",
          "x-intellij-html-description": "Kubernetes manifests in remote clusters.\n",
          "default": "[]"
        }
      },
      "preferredOrder": [
        "manifests",
        "remoteManifests",
        "flags"
      ],
      "additionalProperties": false,
      "description": "(beta) uses a client side `kubectl apply` to deploy manifests. You'll need a `kubectl` CLI version installed that's compatible with your cluster.",
      "x-intellij-html-description": "(beta) uses a client side <code>kubectl apply</code> to deploy manifests. You'll need a <code>kubectl</code> CLI version installed that's compatible with your cluster.\n"
    },
    "KubectlFlags": {
      "properties": {
        "apply": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "additional flags passed on creations (`kubectl apply`).",
          "x-intellij-html-description": "additional flags passed on creations (<code>kubectl apply</code>).\n",
          "default": "[]"
        },
        "delete": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "additional flags passed on deletions (`kubectl delete`).",
          "x-intellij-html-description": "additional flags passed on deletions (<code>kubectl delete</code>).\n",
          "default": "[]"
        },
        "global": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "additional flags passed on every command.",
          "x-intellij-html-description": "additional flags passed on every command.\n",
          "default": "[]"
        }
      },
      "preferredOrder": [
        "global",
        "apply",
        "delete"
      ],
      "additionalProperties": false,
      "description": "additional flags passed on the command line to kubectl either on every command (Global), on creations (Apply) or deletions (Delete).",
      "x-intellij-html-description": "additional flags passed on the command line to kubectl either on every command (Global), on creations (Apply) or deletions (Delete).\n"
    },
    "KustomizeDeploy": {
      "properties": {
        "flags": {
          "$ref": "#/definitions/KubectlFlags",
          "description": "additional flags passed to `kubectl`.",
          "x-intellij-html-description": "additional flags passed to <code>kubectl</code>.\n"
        },
        "path": {
          "type": "string",
          "description": "path to Kustomization files.",
          "x-intellij-html-description": "path to Kustomization files.\n",
          "default": "."
        }
      },
      "preferredOrder": [
        "path",
        "flags"
      ],
      "additionalProperties": false,
      "description": "(beta) uses the `kustomize` CLI to \"patch\" a deployment for a target environment.",
      "x-intellij-html-description": "(beta) uses the <code>kustomize</code> CLI to &quot;patch&quot; a deployment for a target environment.\n"
    },
    "LocalBuild": {
      "properties": {
        "push": {
          "type": "boolean",
          "description": "should images be pushed to a registry. If not specified, images are pushed only if the current Kubernetes context connects to a remote cluster.",
          "x-intellij-html-description": "should images be pushed to a registry. If not specified, images are pushed only if the current Kubernetes context connects to a remote cluster.\n"
        },
        "useBuildkit": {
          "type": "boolean",
          "description": "use BuildKit to build Docker images.",
          "x-intellij-html-description": "use BuildKit to build Docker images.\n",
          "default": "false"
        },
        "useDockerCLI": {
          "type": "boolean",
          "description": "use `docker` command-line interface instead of Docker Engine APIs.",
          "x-intellij-html-description": "use <code>docker</code> command-line interface instead of Docker Engine APIs.\n",
          "default": "false"
        }
      },
      "preferredOrder": [
        "push",
        "useDockerCLI",
        "useBuildkit"
      ],
      "additionalProperties": false,
      "description": "(beta) describes how to do a build on the local docker daemon and optionally push to a repository.",
      "x-intellij-html-description": "(beta) describes how to do a build on the local docker daemon and optionally push to a repository.\n"
    },
    "LocalDir": {
      "description": "configures how Kaniko mounts sources directly via an `emptyDir` volume.",
      "x-intellij-html-description": "configures how Kaniko mounts sources directly via an <code>emptyDir</code> volume.\n"
    },
    "Profile": {
      "required": [
        "name"
      ],
      "properties": {
        "activation": {
          "items": {
            "$ref": "#/definitions/Activation"
          },
          "type": "array",
          "description": "criteria by which a profile can be auto-activated.",
          "x-intellij-html-description": "criteria by which a profile can be auto-activated.\n"
        },
        "build": {
          "$ref": "#/definitions/BuildConfig",
          "description": "replaces the main `build` configuration.",
          "x-intellij-html-description": "replaces the main <code>build</code> configuration.\n"
        },
        "deploy": {
          "$ref": "#/definitions/DeployConfig",
          "description": "replaces the main `deploy` configuration.",
          "x-intellij-html-description": "replaces the main <code>deploy</code> configuration.\n"
        },
        "name": {
          "type": "string",
          "description": "a unique profile name.",
          "x-intellij-html-description": "a unique profile name.\n",
          "examples": [
            "profile-prod"
          ]
        },
        "patches": {
          "items": {
            "$ref": "#/definitions/JSONPatch"
          },
          "type": "array",
          "description": "a list of patches applied to the configuration. Patches use the JSON patch notation.",
          "x-intellij-html-description": "a list of patches applied to the configuration. Patches use the JSON patch notation.\n"
        },
        "test": {
          "items": {
            "$ref": "#/definitions/TestCase"
          },
          "type": "array",
          "description": "replaces the main `test` configuration.",
          "x-intellij-html-description": "replaces the main <code>test</code> configuration.\n"
        }
      },
      "preferredOrder": [
        "name",
        "build",
        "test",
        "deploy",
        "patches",
        "activation"
      ],
      "additionalProperties": false,
      "description": "(beta) profiles are used to override any `build`, `test` or `deploy` configuration.",
      "x-intellij-html-description": "(beta) profiles are used to override any <code>build</code>, <code>test</code> or <code>deploy</code> configuration.\n"
    },
    "ShaTagger": {
      "description": "(beta) tags images with their sha256 digest.",
      "x-intellij-html-description": "(beta) tags images with their sha256 digest.\n"
    },
    "SkaffoldPipeline": {
      "properties": {
        "apiVersion": {
          "type": "string",
          "description": "version of the configuration.",
          "x-intellij-html-description": "version of the configuration.\n"
        },
        "build": {
          "$ref": "#/definitions/BuildConfig",
          "description": "describes how images are built.",
          "x-intellij-html-description": "describes how images are built.\n"
        },
        "deploy": {
          "$ref": "#/definitions/DeployConfig",
          "description": "describes how images are deployed.",
          "x-intellij-html-description": "describes how images are deployed.\n"
        },
        "kind": {
          "type": "string",
          "description": "always `Config`.",
          "x-intellij-html-description": "always <code>Config</code>.\n",
          "default": "Config"
        },
        "profiles": {
          "items": {
            "$ref": "#/definitions/Profile"
          },
          "type": "array",
          "description": "(beta) can override be used to `build`, `test` or `deploy` configuration.",
          "x-intellij-html-description": "(beta) can override be used to <code>build</code>, <code>test</code> or <code>deploy</code> configuration.\n"
        },
        "test": {
          "items": {
            "$ref": "#/definitions/TestCase"
          },
          "type": "array",
          "description": "describes how images are tested.",
          "x-intellij-html-description": "describes how images are tested.\n"
        }
      },
      "preferredOrder": [
        "apiVersion",
        "kind",
        "build",
        "test",
        "deploy",
        "profiles"
      ],
      "additionalProperties": false
    },
    "TagPolicy": {
      "properties": {
        "dateTime": {
          "$ref": "#/definitions/DateTimeTagger",
          "description": "(beta) tags images with the build timestamp.",
          "x-intellij-html-description": "(beta) tags images with the build timestamp.\n"
        },
        "envTemplate": {
          "$ref": "#/definitions/EnvTemplateTagger",
          "description": "(beta) tags images with a configurable template string.",
          "x-intellij-html-description": "(beta) tags images with a configurable template string.\n"
        },
        "gitCommit": {
          "$ref": "#/definitions/GitTagger",
          "description": "(beta) tags images with the git tag or commit of the artifact's workspace.",
          "x-intellij-html-description": "(beta) tags images with the git tag or commit of the artifact's workspace.\n"
        },
        "sha256": {
          "$ref": "#/definitions/ShaTagger",
          "description": "(beta) tags images with their sha256 digest.",
          "x-intellij-html-description": "(beta) tags images with their sha256 digest.\n"
        }
      },
      "preferredOrder": [
        "gitCommit",
        "sha256",
        "envTemplate",
        "dateTime"
      ],
      "additionalProperties": false,
      "description": "contains all the configuration for the tagging step.",
      "x-intellij-html-description": "contains all the configuration for the tagging step.\n"
    },
    "TestCase": {
      "required": [
        "image"
      ],
      "properties": {
        "image": {
          "type": "string",
          "description": "artifact on which to run those tests.",
          "x-intellij-html-description": "artifact on which to run those tests.\n",
          "examples": [
            "gcr.io/k8s-skaffold/example"
          ]
        },
        "structureTests": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "the [Container Structure Tests](https://github.com/GoogleContainerTools/container-structure-test) to run on that artifact.",
          "x-intellij-html-description": "the <a href=\"https://github.com/GoogleContainerTools/container-structure-test\">Container Structure Tests</a> to run on that artifact.\n",
          "default": "[]",
          "examples": [
            "[\"./test/*\"]"
          ]
        }
      },
      "preferredOrder": [
        "image",
        "structureTests"
      ],
      "additionalProperties": false,
      "description": "a list of structure tests to run on images that Skaffold builds.",
      "x-intellij-html-description": "a list of structure tests to run on images that Skaffold builds.\n"
    }
  }
}
